# -------------------------------------------------------------------------------------
#
# Copyright (c) 2024, WSO2 LLC. (https://www.wso2.com).
#
# WSO2 LLC. licenses this file to you under the Apache License,
# Version 2.0 (the "License"); you may not use this file except
# in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the
# specific language governing permissions and limitations
# under the License.
#
# --------------------------------------------------------------------------------------

name: ðŸš€ Release

on:
    push:
        branches: ["main"]
        paths:
            - "applications/*/**"
            - "connections/*/**"
    workflow_dispatch:
        inputs:
            releaseType:
                description: Select the integration type for which you want the artifacts to be released
                type: choice
                options:
                    - application
                    - connection
                required: true
            integrationName:
                description: Enter the name of the integration to be released (e.g., salesforce)
                required: true

env:
    INTEGRATION_TYPES: applications,connections
    MAIN_VERSION: v1.0

jobs:
    release_integration_templates:
        name: Release Integration Templates
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2
              with:
                fetch-depth: 2

            - name: Check integration template changes
              id: check_integration_template_changes
              run: |
                diff=$(git diff --name-only HEAD^ HEAD)

                integration_types=',' read -r -a array <<< "${{ env.IDENTITY_APPS_TAG }}"
                echo "$integration_types"

                for type in "${integration_types[@]}"; do
                    integration_type_diff=$(grep "^$type/.*" <<<"$diff")
                    echo "print"

                    if [[ -z "$integration_type_diff" ]]; then
                        continue
                    fi

                    declare -A unique_template_names

                    for filepath in $integration_type_diff; do
                        template_name=$(echo "$filepath" | cut -d'/' -f2)

                        unique_template_names["$template_name"]=1
                    done

                    echo "$type"
                    echo "${!unique_template_names[@]}"
                done
                

        # dev-build:
        #     runs-on: ubuntu-latest

        #     needs: [is_dev_changed]
        #     if: needs.is_dev_changed.outputs.dev_changed == 'True' || (github.event.inputs.releaseType == 'dev')

        #     steps:
        #         - uses: actions/checkout@v3
        #           with:
        #               fetch-depth: 0

        #         - name: Download Identity Apps Source Code
        #           run: wget "${{ env.IDENTITY_APPS_URL }}/identity-apps-core@${{ env.IDENTITY_APPS_TAG }}.zip" -P .target

        #         - name: Extract Identity Apps Source Code Zip
        #           run: unzip -d .target .target/identity-apps-core@${{ env.IDENTITY_APPS_TAG }}.zip

        #         - name: Move custom layouts into indetity-apps layouts directory
        #           run: |
        #               # Move all custom layout into identity-apps/components/login-portal-layouts/layouts directory
        #               identityVersion=${{ env.IDENTITY_APPS_TAG }}
        #               while read -r orgName
        #               do
        #                 if [ -d "dev/$orgName/layout/src" ]
        #                 then
        #                   rsync -a "dev/$orgName/layout/src/" ".target/identity-apps--wso2is-identity-apps-core-${identityVersion}/identity-apps-core/components/login-portal-layouts/layouts/$orgName"
        #                 fi
        #               done <<< "$(cd dev && ls)"

        #         - name: Set up JDK 11
        #           uses: actions/setup-java@v3
        #           with:
        #               java-version: "11"
        #               distribution: "temurin"
        #               cache: maven

        #         - name: Build with Maven
        #           run: |
        #               identityVersion=${{ env.IDENTITY_APPS_TAG }}
        #               mvn clean install --file .target/identity-apps--wso2is-identity-apps-core-${identityVersion}/identity-apps-core/components/login-portal-layouts/pom.xml

        #         - name: Create the new tag
        #           run: |
        #               newVersion=""
        #               tagsArray=($(echo "$(git tag | sort -V)" | tr "," "\n"))
        #               if [[ ${#tagsArray[@]} = 0 ]]; then
        #                 newVersion="${{ env.MAIN_VERSION }}.0"
        #               else
        #                 readarray -d . -t releaseVersionParts <<< "${tagsArray[-1]}"
        #                 if [[ "${releaseVersionParts[0]}.${releaseVersionParts[1]}" = "${{ env.MAIN_VERSION }}" ]]
        #                 then
        #                   newVersion="${{ env.MAIN_VERSION }}.$((${releaseVersionParts[2]} + 1))"
        #                 else
        #                   newVersion="${{ env.MAIN_VERSION }}.0"
        #                 fi
        #               fi
        #               echo "::set-env name=newVersion::$newVersion"

        #         - name: Create a zip file containing all accounts content
        #           run: |
        #               identityVersion=${{ env.IDENTITY_APPS_TAG }}
        #               cd .target/identity-apps--wso2is-identity-apps-core-${identityVersion}/identity-apps-core/components/login-portal-layouts/target/layouts
        #               zip -r "${GITHUB_WORKSPACE}/.target/dev-accounts-content-$newVersion.zip" ./*
        #               echo $newVersion

        #         - name: Create a new release
        #           uses: ncipollo/release-action@v1
        #           with:
        #               tag: ${{ env.newVersion }}
        #               artifacts: .target/dev-accounts-content-${{ env.newVersion }}.zip
        #               token: ${{ secrets.GITHUB_TOKEN }}

        #         - name: Add changes to the dev pipeline
        #           run: |
        #               mkdir deployment-pipeline
        #               git clone "https://${{ env.GIT_USERNAME }}:${{ secrets.ASGARDEO_DEV_PIPELINE_BOT_TOKEN }}@github.com/wso2-enterprise/asgardeo-deployment-pipeline.git" deployment-pipeline
        #               cd deployment-pipeline
        #               git checkout dev-001
        #               git config user.name "${{ env.GIT_USERNAME }}"
        #               git config user.email "iam-cloud@wso2.com"
        #               REF_IN_DEV=$(grep 'GITHUB_RELEASE_TAG:' cd-pipelines/accounts-content/dev-setup-variables.yaml)
        #               sed -i 's|'"${REF_IN_DEV}"'|  GITHUB_RELEASE_TAG: '"${{ env.newVersion }}"'|' cd-pipelines/accounts-content/dev-setup-variables.yaml
        #               git add cd-pipelines/accounts-content/dev-setup-variables.yaml
        #               git commit -m "[Dev] Update the accounts content release version to - ${{ env.newVersion }}"
        #               git push origin dev-001
